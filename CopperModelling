import pandas as pd
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings("ignore")
df=pd.read_csv("Copper_Set.xlsx.csv")
df
id	item_date	quantity tons	customer	country	status	item type	application	thickness	width	material_ref	product_ref	delivery date	selling_price
0	EC06F063-9DF0-440C-8764-0B0C05A4F6AE	20210401.0	54.151139	30156308.0	28.0	Won	W	10.0	2.00	1500.0	DEQ1 S460MC	1670798778	20210701.0	854.00
1	4E5F4B3D-DDDF-499D-AFDE-A3227EC49425	20210401.0	768.024839	30202938.0	25.0	Won	W	41.0	0.80	1210.0	0000000000000000000000000000000000104991	1668701718	20210401.0	1047.00
2	E140FF1B-2407-4C02-A0DD-780A093B1158	20210401.0	386.127949	30153963.0	30.0	Won	WI	28.0	0.38	952.0	S0380700	628377	20210101.0	644.33
3	F8D507A0-9C62-4EFE-831E-33E1DA53BB50	20210401.0	202.411065	30349574.0	32.0	Won	S	59.0	2.30	1317.0	DX51D+ZM310MAO 2.3X1317	1668701718	20210101.0	768.00
4	4E1C4E78-152B-430A-8094-ADD889C9D0AD	20210401.0	785.526262	30211560.0	28.0	Won	W	10.0	4.00	2000.0	2_S275JR+AR-CL1	640665	20210301.0	577.00
...	...	...	...	...	...	...	...	...	...	...	...	...	...	...
181668	DE633116-D1DF-4846-982E-55EFC3658A76	20200702.0	102.4824216	30200854.0	25.0	Won	W	41.0	0.96	1220.0	0000000000000000000000000000000001000777	164141591	20200701.0	591.00
181669	A48374B1-E6DB-45F2-889A-1F9C27C099EB	20200702.0	208.0864686	30200854.0	25.0	Won	W	41.0	0.95	1500.0	0000000000000000000000000000000001000227	164141591	20200701.0	589.00
181670	91643238-5C7B-4237-9A5F-63AE3D35F320	20200702.0	4.235593568	30200854.0	25.0	Won	W	41.0	0.71	1250.0	0000000000000000000000000000000001004216	164141591	20200701.0	619.00
181671	7AFFD323-01D9-4E15-B80D-7D1B03498FC8	20200702.0	-2000	30200854.0	25.0	Won	W	41.0	0.85	1250.0	0000000000000000000000000000000001001149	164141591	20200701.0	601.00
181672	AD0CA853-AE3C-4B2F-9FBB-8B0B965F84BC	20200702.0	406.6865384	30200854.0	25.0	Won	W	41.0	0.71	1240.0	0000000000000000000000000000000001005439	164141591	20200701.0	607.00
181673 rows × 14 columns

#Dealing with data in wrong format for categorical variables this step is ignored
df['item_date']=pd.to_datetime(df['item_date'],format="%Y%m%d",errors='coerce').dt.date
df
id	item_date	quantity tons	customer	country	status	item type	application	thickness	width	material_ref	product_ref	delivery date	selling_price
0	EC06F063-9DF0-440C-8764-0B0C05A4F6AE	2021-04-01	54.151139	30156308.0	28.0	Won	W	10.0	2.00	1500.0	DEQ1 S460MC	1670798778	20210701.0	854.00
1	4E5F4B3D-DDDF-499D-AFDE-A3227EC49425	2021-04-01	768.024839	30202938.0	25.0	Won	W	41.0	0.80	1210.0	0000000000000000000000000000000000104991	1668701718	20210401.0	1047.00
2	E140FF1B-2407-4C02-A0DD-780A093B1158	2021-04-01	386.127949	30153963.0	30.0	Won	WI	28.0	0.38	952.0	S0380700	628377	20210101.0	644.33
3	F8D507A0-9C62-4EFE-831E-33E1DA53BB50	2021-04-01	202.411065	30349574.0	32.0	Won	S	59.0	2.30	1317.0	DX51D+ZM310MAO 2.3X1317	1668701718	20210101.0	768.00
4	4E1C4E78-152B-430A-8094-ADD889C9D0AD	2021-04-01	785.526262	30211560.0	28.0	Won	W	10.0	4.00	2000.0	2_S275JR+AR-CL1	640665	20210301.0	577.00
...	...	...	...	...	...	...	...	...	...	...	...	...	...	...
181668	DE633116-D1DF-4846-982E-55EFC3658A76	2020-07-02	102.4824216	30200854.0	25.0	Won	W	41.0	0.96	1220.0	0000000000000000000000000000000001000777	164141591	20200701.0	591.00
181669	A48374B1-E6DB-45F2-889A-1F9C27C099EB	2020-07-02	208.0864686	30200854.0	25.0	Won	W	41.0	0.95	1500.0	0000000000000000000000000000000001000227	164141591	20200701.0	589.00
181670	91643238-5C7B-4237-9A5F-63AE3D35F320	2020-07-02	4.235593568	30200854.0	25.0	Won	W	41.0	0.71	1250.0	0000000000000000000000000000000001004216	164141591	20200701.0	619.00
181671	7AFFD323-01D9-4E15-B80D-7D1B03498FC8	2020-07-02	-2000	30200854.0	25.0	Won	W	41.0	0.85	1250.0	0000000000000000000000000000000001001149	164141591	20200701.0	601.00
181672	AD0CA853-AE3C-4B2F-9FBB-8B0B965F84BC	2020-07-02	406.6865384	30200854.0	25.0	Won	W	41.0	0.71	1240.0	0000000000000000000000000000000001005439	164141591	20200701.0	607.00
181673 rows × 14 columns

df['material_ref'] = df['material_ref'].str.lstrip('0')
df['delivery date']=pd.to_datetime(df['delivery date'],format="%Y%m%d",errors='coerce').dt.date
df['quantity tons']=pd.to_numeric(df['quantity tons'],errors='coerce')
df['customer']=pd.to_numeric(df['customer'],errors='coerce')
df['country']=pd.to_numeric(df['country'],errors='coerce')
df['application']=pd.to_numeric(df['application'],errors='coerce')
df['thickness']=pd.to_numeric(df['thickness'],errors='coerce')
df['width']=pd.to_numeric(df['width'],errors='coerce')
df['product_ref']=pd.to_numeric(df['product_ref'],errors='coerce')
df['selling_price']=pd.to_numeric(df['selling_price'],errors='coerce')
df.head()
id	item_date	quantity tons	customer	country	status	item type	application	thickness	width	material_ref	product_ref	delivery date	selling_price
0	EC06F063-9DF0-440C-8764-0B0C05A4F6AE	2021-04-01	54.151139	30156308.0	28.0	Won	W	10.0	2.00	1500.0	DEQ1 S460MC	1670798778	2021-07-01	854.00
1	4E5F4B3D-DDDF-499D-AFDE-A3227EC49425	2021-04-01	768.024839	30202938.0	25.0	Won	W	41.0	0.80	1210.0	104991	1668701718	2021-04-01	1047.00
2	E140FF1B-2407-4C02-A0DD-780A093B1158	2021-04-01	386.127949	30153963.0	30.0	Won	WI	28.0	0.38	952.0	S0380700	628377	2021-01-01	644.33
3	F8D507A0-9C62-4EFE-831E-33E1DA53BB50	2021-04-01	202.411065	30349574.0	32.0	Won	S	59.0	2.30	1317.0	DX51D+ZM310MAO 2.3X1317	1668701718	2021-01-01	768.00
4	4E1C4E78-152B-430A-8094-ADD889C9D0AD	2021-04-01	785.526262	30211560.0	28.0	Won	W	10.0	4.00	2000.0	2_S275JR+AR-CL1	640665	2021-03-01	577.00
df.info()
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 181673 entries, 0 to 181672
Data columns (total 14 columns):
 #   Column         Non-Null Count   Dtype  
---  ------         --------------   -----  
 0   id             181671 non-null  object 
 1   item_date      181670 non-null  object 
 2   quantity tons  181672 non-null  float64
 3   customer       181672 non-null  float64
 4   country        181645 non-null  float64
 5   status         181671 non-null  object 
 6   item type      181673 non-null  object 
 7   application    181649 non-null  float64
 8   thickness      181672 non-null  float64
 9   width          181673 non-null  float64
 10  material_ref   103754 non-null  object 
 11  product_ref    181673 non-null  int64  
 12  delivery date  181670 non-null  object 
 13  selling_price  181672 non-null  float64
dtypes: float64(7), int64(1), object(6)
memory usage: 19.4+ MB
df.isnull().sum()
id                   2
item_date            3
quantity tons        1
customer             1
country             28
status               2
item type            0
application         24
thickness            1
width                0
material_ref     77919
product_ref          0
delivery date        3
selling_price        1
dtype: int64
df['material_ref'].fillna('unknown',inplace=True)
df=df.dropna()
df.isnull().sum()
id               0
item_date        0
quantity tons    0
customer         0
country          0
status           0
item type        0
application      0
thickness        0
width            0
material_ref     0
product_ref      0
delivery date    0
selling_price    0
dtype: int64
df.info()
<class 'pandas.core.frame.DataFrame'>
Int64Index: 181631 entries, 0 to 181672
Data columns (total 14 columns):
 #   Column         Non-Null Count   Dtype  
---  ------         --------------   -----  
 0   id             181631 non-null  object 
 1   item_date      181631 non-null  object 
 2   quantity tons  181631 non-null  float64
 3   customer       181631 non-null  float64
 4   country        181631 non-null  float64
 5   status         181631 non-null  object 
 6   item type      181631 non-null  object 
 7   application    181631 non-null  float64
 8   thickness      181631 non-null  float64
 9   width          181631 non-null  float64
 10  material_ref   181631 non-null  object 
 11  product_ref    181631 non-null  int64  
 12  delivery date  181631 non-null  object 
 13  selling_price  181631 non-null  float64
dtypes: float64(7), int64(1), object(6)
memory usage: 20.8+ MB
df_1=df.copy()
a=df_1['quantity tons']<=0
df_1.loc[a,'quantity tons']=np.nan
​
b=df_1['thickness']<=0
df_1.loc[b,'thickness']=np.nan
​
b=df_1['selling_price']<=0
df_1.loc[b,'selling_price']=np.nan
​
​
df_1.isnull().sum()
id               0
item_date        0
quantity tons    4
customer         0
country          0
status           0
item type        0
application      0
thickness        0
width            0
material_ref     0
product_ref      0
delivery date    0
selling_price    7
dtype: int64
df_1=df_1.dropna()
df_1.isnull().sum()
id               0
item_date        0
quantity tons    0
customer         0
country          0
status           0
item type        0
application      0
thickness        0
width            0
material_ref     0
product_ref      0
delivery date    0
selling_price    0
dtype: int64
df_1['selling_price_log']=np.log(df_1['selling_price'])
df_1['quantity_tons_log']=np.log(df_1['quantity tons'])
df_1['thickness_log']=np.log(df_1['thickness'])
df_1['selling_price_log']
0         6.749931
1         6.953684
2         6.468211
3         6.643790
4         6.357842
            ...   
181667    6.400257
181668    6.381816
181669    6.378426
181670    6.428105
181672    6.408529
Name: selling_price_log, Length: 181620, dtype: float64
sns.distplot(df_1['selling_price_log'])
plt.show()
sns.distplot(df_1['quantity_tons_log'])
plt.show()
sns.distplot(df_1['thickness_log'])
plt.show()



plt.figure(figsize=(20,8))
sns.boxplot(data=df_1,width=0.8)
plt.show()

plt.subplot(1,2,1)
sns.boxplot(data=df_1['quantity tons'],width=0.8)
plt.subplot(1,2,2)
sns.boxplot(data=df_1['selling_price'],width=0.8)
plt.tight_layout()
plt.show()

df_1['quantity tons'].max()
1000000000.0
df_1.describe()
quantity tons	customer	country	application	thickness	width	product_ref	selling_price	selling_price_log	quantity_tons_log	thickness_log
count	1.816200e+05	1.816200e+05	181620.000000	181620.000000	181620.000000	181620.000000	1.816200e+05	1.816200e+05	181620.000000	181620.000000	181620.000000
mean	5.876596e+03	3.023251e+07	44.894009	25.615571	2.550501	1295.269480	4.740204e+08	1.918487e+03	6.626299	3.392019	0.480172
std	2.349418e+06	1.005651e+05	24.404547	17.753855	2.976518	261.650874	7.175358e+08	3.318431e+05	0.564058	1.444974	0.933528
min	1.000000e-05	1.245800e+04	25.000000	2.000000	0.180000	1.000000	6.117280e+05	1.000000e-01	-2.302585	-11.512925	-1.714798
25%	1.096871e+01	3.019688e+07	26.000000	10.000000	0.700000	1179.750000	6.119930e+05	6.690000e+02	6.505784	2.395046	-0.356675
50%	3.036409e+01	3.020524e+07	30.000000	15.000000	1.500000	1250.000000	6.406650e+05	8.120000e+02	6.699500	3.413261	0.405465
75%	6.716332e+01	3.028042e+07	78.000000	41.000000	3.000000	1500.000000	1.332077e+09	9.530000e+02	6.859615	4.207127	1.098612
max	1.000000e+09	3.040818e+07	113.000000	99.000000	400.000000	2990.000000	1.722208e+09	1.000010e+08	18.420691	20.723266	5.991465
df_1.loc[df_1['quantity tons']==1.000000e+09]
id	item_date	quantity tons	customer	country	status	item type	application	thickness	width	material_ref	product_ref	delivery date	selling_price	selling_price_log	quantity_tons_log	thickness_log
173022	475D1545-4071-4590-BE18-C5D7B66D8448	2020-07-14	1.000000e+09	30205728.0	30.0	Not lost for AM	S	10.0	0.85	1250.0	DX51D+Z	164141591	2020-10-01	583.0	6.368187	20.723266	-0.162519
pip install scipy
Requirement already satisfied: scipy in c:\users\silam\anaconda3\lib\site-packages (1.10.0)
Requirement already satisfied: numpy<1.27.0,>=1.19.5 in c:\users\silam\anaconda3\lib\site-packages (from scipy) (1.23.5)
Note: you may need to restart the kernel to use updated packages.
import scipy.stats as st
st.scoreatpercentile(df_1['quantity tons'],25)
10.96870593
lw=st.scoreatpercentile(df_1['quantity tons'],25)-1.5*(st.scoreatpercentile(df_1['quantity tons'],75)-st.scoreatpercentile(df_1['quantity tons'],25))
uw=st.scoreatpercentile(df_1['quantity tons'],75)+1.5*(st.scoreatpercentile(df_1['quantity tons'],75)-st.scoreatpercentile(df_1['quantity tons'],25))
df_1[df_1['quantity tons']>uw]
id	item_date	quantity tons	customer	country	status	item type	application	thickness	width	material_ref	product_ref	delivery date	selling_price	selling_price_log	quantity_tons_log	thickness_log
1	4E5F4B3D-DDDF-499D-AFDE-A3227EC49425	2021-04-01	768.024839	30202938.0	25.0	Won	W	41.0	0.80	1210.0	104991	1668701718	2021-04-01	1047.00	6.953684	6.643822	-0.223144
2	E140FF1B-2407-4C02-A0DD-780A093B1158	2021-04-01	386.127949	30153963.0	30.0	Won	WI	28.0	0.38	952.0	S0380700	628377	2021-01-01	644.33	6.468211	5.956169	-0.967584
3	F8D507A0-9C62-4EFE-831E-33E1DA53BB50	2021-04-01	202.411065	30349574.0	32.0	Won	S	59.0	2.30	1317.0	DX51D+ZM310MAO 2.3X1317	1668701718	2021-01-01	768.00	6.643790	5.310301	0.832909
4	4E1C4E78-152B-430A-8094-ADD889C9D0AD	2021-04-01	785.526262	30211560.0	28.0	Won	W	10.0	4.00	2000.0	2_S275JR+AR-CL1	640665	2021-03-01	577.00	6.357842	6.666354	1.386294
5	FE372230-29B1-4A29-BB73-CB9D3078C286	2021-04-01	225.790676	30202938.0	25.0	Won	W	41.0	1.50	1265.0	102325	1668701718	2021-04-01	983.00	6.890609	5.419608	0.405465
...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...
181660	8A72A6C0-C057-45FE-9B53-6A0E81F327AE	2020-07-02	704.749162	30200854.0	25.0	Won	W	41.0	0.84	1500.0	1000226	164141591	2020-07-01	599.00	6.395262	6.557842	-0.174353
181663	08F8F1D6-0DAC-42B5-BA8A-B6C99EF1700B	2020-07-02	1203.157826	30200854.0	25.0	Won	W	41.0	0.72	1240.0	1000856	164141591	2020-07-01	622.00	6.432940	7.092705	-0.328504
181664	A33557CD-93EF-4828-8235-E0A576C1A925	2020-07-02	603.114940	30200854.0	25.0	Won	W	41.0	0.85	1240.0	1000221	164141591	2020-07-01	609.00	6.411818	6.402108	-0.162519
181669	A48374B1-E6DB-45F2-889A-1F9C27C099EB	2020-07-02	208.086469	30200854.0	25.0	Won	W	41.0	0.95	1500.0	1000227	164141591	2020-07-01	589.00	6.378426	5.337954	-0.051293
181672	AD0CA853-AE3C-4B2F-9FBB-8B0B965F84BC	2020-07-02	406.686538	30200854.0	25.0	Won	W	41.0	0.71	1240.0	1005439	164141591	2020-07-01	607.00	6.408529	6.008043	-0.342490
20949 rows × 17 columns

print(np.percentile(df_1['quantity tons'],91))
print(np.percentile(df_1['quantity tons'],92))
print(np.percentile(df_1['quantity tons'],93))
print(np.percentile(df_1['quantity tons'],94))
print(np.percentile(df_1['quantity tons'],95))
print(np.percentile(df_1['quantity tons'],96))
print(np.percentile(df_1['quantity tons'],97))
print(np.percentile(df_1['quantity tons'],98))
print(np.percentile(df_1['quantity tons'],99))
print(np.percentile(df_1['quantity tons'],100))
199.54233449900033
206.91382284
231.84661182200003
266.9833028239979
309.4863929199999
401.7718038879999
504.01423218699995
702.77343398
1124.7904854399944
1000000000.0
print(np.percentile(df_1['quantity tons'],99.1))
print(np.percentile(df_1['quantity tons'],99.2))
print(np.percentile(df_1['quantity tons'],99.3))
print(np.percentile(df_1['quantity tons'],99.4))
print(np.percentile(df_1['quantity tons'],99.5))
print(np.percentile(df_1['quantity tons'],99.6))
print(np.percentile(df_1['quantity tons'],99.7))
print(np.percentile(df_1['quantity tons'],99.8))
print(np.percentile(df_1['quantity tons'],99.9))
print(np.percentile(df_1['quantity tons'],100))
1215.142581482003
1316.741778152002
1461.6806040009678
1550.5082807620088
1767.8017327849984
2006.585464020002
2506.371653978002
3207.6683439119984
4894.557015787225
1000000000.0
df_1[df_1['quantity tons']>20000]
id	item_date	quantity tons	customer	country	status	item type	application	thickness	width	material_ref	product_ref	delivery date	selling_price	selling_price_log	quantity_tons_log	thickness_log
2834	1693B1EF-1344-4516-9088-641452A07042	2021-03-29	2.030029e+04	30333845.0	78.0	Not lost for AM	S	59.0	14.20	1400.0	unknown	640665	2021-07-01	1022.00	6.929517	9.918391	2.653242
71486	50BA8F0A-64A7-41D7-A064-370FA88B6674	2020-12-23	2.400032e+04	30336279.0	78.0	Won	W	59.0	2.00	900.0	ETZ1-COS 2.30 X 1020	640665	2021-01-01	705.00	6.558198	10.085823	0.693147
71498	666F2F55-32E4-4339-8874-8177E2995E8F	2020-12-23	2.072437e+04	30336279.0	78.0	Won	W	59.0	1.80	900.0	ETZ2-COS	640665	2021-01-01	672.00	6.510258	9.939066	0.587787
100248	FB8C1848-E50E-4DAD-AFA9-76678010D1A1	2020-11-18	2.952815e+04	30198507.0	26.0	Won	PL	10.0	1.00	1250.0	15025710	628377	2021-01-01	689.00	6.535241	10.293099	0.000000
100256	67B145B4-4E34-4972-AF45-ED8C2016DAEB	2020-11-18	4.775849e+04	30198507.0	26.0	Won	PL	10.0	2.50	1460.0	15042157	164141591	2021-01-01	760.00	6.633318	10.773912	0.916291
100260	142B2DC8-CFE0-4990-8880-5E51A0211990	2020-11-18	7.025236e+04	30198507.0	26.0	Won	PL	10.0	1.70	1127.0	15030299	164141591	2021-01-01	743.00	6.610696	11.159849	0.530628
173022	475D1545-4071-4590-BE18-C5D7B66D8448	2020-07-14	1.000000e+09	30205728.0	30.0	Not lost for AM	S	10.0	0.85	1250.0	DX51D+Z	164141591	2020-10-01	583.00	6.368187	20.723266	-0.162519
173211	AC088492-319F-43CD-B955-E8276F1E9594	2020-07-14	5.000000e+07	30200964.0	25.0	Not lost for AM	W	41.0	0.88	1245.0	unknown	611993	2020-07-01	885.64	6.786311	17.727534	-0.127833
175802	02DBF1A9-F98E-48E9-AF3C-57BB09119CF7	2020-07-08	3.000461e+04	30336279.0	78.0	Won	W	59.0	2.00	900.0	ETZ1-COS 2.30 X 1020 1950 EKO	640665	2020-07-01	529.00	6.270988	10.309106	0.693147
176479	E3C34592-632D-43E3-9C2A-99B530EFCF55	2020-07-08	3.600063e+04	30336279.0	78.0	Won	W	59.0	2.00	900.0	ETZ1-COS 2.30 X 1020 1950 EKO	640665	2020-07-01	542.00	6.295266	10.491292	0.693147
df_1[df_1['quantity tons']>4894.55]
id	item_date	quantity tons	customer	country	status	item type	application	thickness	width	material_ref	product_ref	delivery date	selling_price	selling_price_log	quantity_tons_log	thickness_log
1036	3B0DCC5A-296E-4A6F-AFA8-1FF9AFA5BCC2	2021-03-31	5006.028799	30198507.0	26.0	Won	PL	10.0	1.50	1375.0	15043207	1332077137	2021-10-01	1115.00	7.016610	8.518398	0.405465
1599	65A7707C-5408-4D14-B469-277D47710D1B	2021-03-31	9005.052316	30164695.0	27.0	Won	PL	10.0	1.50	1500.0	BN030000	640665	2021-05-01	802.54	6.687782	9.105541	0.405465
1600	1B9EC509-3C8F-422A-948E-91B56AA5FD46	2021-03-31	5005.675986	30164695.0	27.0	Won	PL	10.0	3.00	1500.0	BN002137	640665	2021-05-01	773.54	6.650977	8.518328	1.098612
2725	7C70B69F-4C45-4B93-A67F-D673BEFDE15A	2021-03-29	19002.122960	30235913.0	78.0	Not lost for AM	S	15.0	14.20	1400.0	unknown	640665	2021-07-01	1030.00	6.937314	9.852306	2.653242
2758	D30BFD48-BC24-4D36-BCA5-307B4186CF72	2021-03-29	19007.224300	30333845.0	78.0	Not lost for AM	S	59.0	14.20	1400.0	unknown	640665	2021-07-01	1031.00	6.938284	9.852574	2.653242
...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...
176479	E3C34592-632D-43E3-9C2A-99B530EFCF55	2020-07-08	36000.630170	30336279.0	78.0	Won	W	59.0	2.00	900.0	ETZ1-COS 2.30 X 1020 1950 EKO	640665	2020-07-01	542.00	6.295266	10.491292	0.693147
176558	F96AE060-B73A-4B26-848E-A7A89CFC94A4	2020-07-08	7703.789452	30166496.0	26.0	Not lost for AM	S	42.0	4.70	1404.0	104082	164141591	2020-08-01	621.00	6.431331	8.949468	1.547563
176838	51A6BD64-BA97-4668-A387-944FA5145A4C	2020-07-08	14476.753100	30336279.0	78.0	Won	W	59.0	1.80	900.0	ETZ2-COS FM	640665	2020-07-01	541.00	6.293419	9.580299	0.587787
176961	96EA876D-CA54-4E29-BEB1-98D465F84E11	2020-07-08	7000.807683	30164696.0	27.0	Won	S	10.0	2.45	1433.0	unknown	1668701718	2020-10-01	677.00	6.517671	8.853781	0.896088
177168	5CD2D9F8-0709-4884-9F87-41CAE1C50036	2020-07-07	9907.603417	30275480.0	26.0	Won	W	56.0	4.00	1100.0	unknown	1670798778	2021-01-01	626.00	6.439350	9.201058	1.386294
182 rows × 17 columns

print(np.percentile(df_1['selling_price'],99.1))
print(np.percentile(df_1['selling_price'],99.2))
print(np.percentile(df_1['selling_price'],99.3))
print(np.percentile(df_1['selling_price'],99.4))
print(np.percentile(df_1['selling_price'],99.5))
print(np.percentile(df_1['selling_price'],99.6))
print(np.percentile(df_1['selling_price'],99.7))
print(np.percentile(df_1['selling_price'],99.8))
print(np.percentile(df_1['selling_price'],99.9))
print(np.percentile(df_1['selling_price'],100))
1385.0
1398.0
1415.3268299999936
1441.0
1467.0
1501.524000000005
1542.0
1588.8357799999917
1698.0
100001015.0
p_05 = df_1['selling_price'].quantile(0.05) # 5th quantile
p_999 = df_1['selling_price'].quantile(0.999) # 99.9th quantile
​
df_1['selling_price'].clip(p_05, p_999, inplace=True)
p_05 = df_1['quantity tons'].quantile(0.05) # 5th quantile
p_999 = df_1['quantity tons'].quantile(0.999) # 99.9th quantile
​
df_1['quantity tons'].clip(p_05, p_999, inplace=True)
df_1['selling_price'].max()
1698.0
df_1['quantity tons'].max()
4894.557015787225
​
print(np.percentile(df_1['thickness'],99.1))
print(np.percentile(df_1['thickness'],99.2))
print(np.percentile(df_1['thickness'],99.3))
print(np.percentile(df_1['thickness'],99.4))
print(np.percentile(df_1['thickness'],99.5))
print(np.percentile(df_1['thickness'],99.6))
print(np.percentile(df_1['thickness'],99.7))
print(np.percentile(df_1['thickness'],99.8))
print(np.percentile(df_1['thickness'],99.9))
print(np.percentile(df_1['thickness'],100))
15.0
15.0
15.0
15.0
15.0
15.0
16.0
20.0
20.0
400.0
p_05 = df_1['thickness'].quantile(0.05) # 5th quantile
p_999 = df_1['thickness'].quantile(0.999) # 99.9th quantile
​
df_1['thickness'].clip(p_05, p_999, inplace=True)
df_1.describe()
quantity tons	customer	country	application	thickness	width	product_ref	selling_price	selling_price_log	quantity_tons_log	thickness_log
count	181620.000000	1.816200e+05	181620.000000	181620.000000	181620.000000	181620.000000	1.816200e+05	181620.000000	181620.000000	181620.000000	181620.000000
mean	91.112231	3.023251e+07	44.894009	25.615571	2.549196	1295.269480	4.740204e+08	826.349623	6.626299	3.392019	0.480172
std	279.059391	1.005651e+05	24.404547	17.753855	2.813705	261.650874	7.175358e+08	200.516907	0.564058	1.444974	0.933528
min	2.892097	1.245800e+04	25.000000	2.000000	0.450000	1.000000	6.117280e+05	521.000000	-2.302585	-11.512925	-1.714798
25%	10.968706	3.019688e+07	26.000000	10.000000	0.700000	1179.750000	6.119930e+05	669.000000	6.505784	2.395046	-0.356675
50%	30.364095	3.020524e+07	30.000000	15.000000	1.500000	1250.000000	6.406650e+05	812.000000	6.699500	3.413261	0.405465
75%	67.163321	3.028042e+07	78.000000	41.000000	3.000000	1500.000000	1.332077e+09	953.000000	6.859615	4.207127	1.098612
max	4894.557016	3.040818e+07	113.000000	99.000000	20.000000	2990.000000	1.722208e+09	1698.000000	18.420691	20.723266	5.991465
from sklearn.preprocessing import OrdinalEncoder
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
OE=OrdinalEncoder()
df_1.status=OE.fit_transform(df_1[['status']])
df_1['item type']=OE.fit_transform(df_1[['item type']])
x=df_1[['quantity_tons_log','status','item type','application','thickness_log','width','country','customer','product_ref']]
y=df_1['selling_price_log']
fig,ax=plt.subplots(figsize=(16,8))
sns.heatmap(x.corr(),annot=True,fmt='1.2f',annot_kws={'size':10},linewidth=1,cmap='coolwarm')
plt.show()

ss=StandardScaler()
ss.fit_transform(x)
array([[ 0.41506739,  0.70620108,  0.82144631, ..., -0.69225033,
        -0.75771563,  1.66790511],
       [ 2.25042993,  0.70620108,  0.82144631, ..., -0.81517858,
        -0.29403459,  1.66498251],
       [ 1.77453529,  0.70620108,  1.76911846, ..., -0.61029817,
        -0.78103392, -0.65974878],
       ...,
       [ 1.34669579,  0.70620108,  0.82144631, ..., -0.81517858,
        -0.31475754, -0.43186654],
       [-1.34846834,  0.70620108,  0.82144631, ..., -0.81517858,
        -0.31475754, -0.43186654],
       [ 1.81043496,  0.70620108,  0.82144631, ..., -0.81517858,
        -0.31475754, -0.43186654]])
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=5)
x_train.shape,x_test.shape
((145296, 9), (36324, 9))
print(x_train.shape)
print(x_test.shape)
print(y_train.shape)
print(y_test.shape)
(145296, 9)
(36324, 9)
(145296,)
(36324,)
from sklearn.tree import DecisionTreeRegressor
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.ensemble import RandomForestRegressor
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.metrics import mean_squared_error
from sklearn import metrics
lr=LinearRegression()
lr.fit(x_train,y_train)
print(lr.score(x_train, y_train))
print(lr.score(x_test, y_test))
0.0846378925377741
0.07492950567973511
training_data_pred=lr.predict(x_train)
​
error_score=mean_squared_error(y_train,training_data_pred)
print(error_score)
0.2889867527003041
plt.scatter(y_train,training_data_pred)
plt.title("Actual price vs predicted price")
plt.xlabel("Actual price")
plt.ylabel("predicted price")
plt.show()

test_data_pred=lr.predict(x_test)
error_score=mean_squared_error(y_test,test_data_pred)
print(error_score)
0.30339285213612643
plt.scatter(y_test,test_data_pred)
plt.title("Actual price vs predicted price")
plt.xlabel("Actual price")
plt.ylabel("predicted price")
plt.show()

rf=RandomForestRegressor(n_estimators=20,max_depth=4,random_state=42)
rf.fit(x_train,y_train)
print(rf.score(x_train,y_train))
print(rf.score(x_test,y_test))
0.8751190576611564
0.8875644277067046
gbr=GradientBoostingRegressor(n_estimators=10,learning_rate=0.1,random_state=42)
gbr.fit(x_train,y_train)
print(gbr.score(x_train,y_train))
print(gbr.score(x_test,y_test))
0.7639652628050485
0.7746201609340708
dtr=DecisionTreeRegressor()
param_grid={'max_depth':[2,5,10,20],
           'min_samples_split':[2,5,10],
           'min_samples_leaf':[1,2,4],
           'max_features':['auto','sqrt','log2']}
​
grid_search=GridSearchCV(estimator=dtr,param_grid=param_grid,cv=5)
grid_search.fit(x_train,y_train)
print('Best hyperparameters:',grid_search.best_params_)
best_model=grid_search.best_estimator_
y_pred=best_model.predict(x_test)
Best hyperparameters: {'max_depth': 20, 'max_features': 'log2', 'min_samples_leaf': 4, 'min_samples_split': 5}
metrics.mean_squared_error(y_test,y_pred)
0.025380660495596053
metrics.mean_absolute_error(y_test,y_pred)
0.11982586534228885
print(metrics.r2_score(y_test,y_pred))
0.9226122171780721
import pickle
with open('model.pkl','wb') as file:
    pickle.dump(best_model,file)
with open ('scaler.pkl','wb') as f:
    pickle.dump(ss,f)
with open('t.pkl','wb') as f:
    pickle.dump(OE,f)
​
df.status.value_counts()
Won                116004
Lost                34431
Not lost for AM     19568
Revised              4276
To be approved       4167
Draft                3121
Offered                53
Offerable              10
Wonderful               1
Name: status, dtype: int64
df_2=df.copy()
df_2=df[df['status'].isin(['Won', 'Lost'])]
len(df_2)
150435
df_2.status.value_counts()
Won     116004
Lost     34431
Name: status, dtype: int64
OE = OrdinalEncoder()
df_2.status = OE.fit_transform(df_2[['status']])
df_2['item type'] = OE.fit_transform(df_2[['item type']])
x = df_2[['quantity tons','selling_price','item type','application','thickness','width','country','customer','product_ref']]
y =df_2['status']
ss.fit_transform(x)
array([[-0.09139439,  0.09705592,  0.76978981, ..., -0.71017265,
        -0.72507203,  1.6673573 ],
       [ 1.52755772,  0.76054292,  0.76978981, ..., -0.83268141,
        -0.2835426 ,  1.66443363],
       [ 0.66147626, -0.62373848,  1.72295071, ..., -0.62850015,
        -0.74727633, -0.66115687],
       ...,
       [-0.20459491, -0.71081685,  0.76978981, ..., -0.83268141,
        -0.30327554, -0.43319041],
       [-4.74988274, -0.77269647,  0.76978981, ..., -0.83268141,
        -0.30327554, -0.43319041],
       [ 0.70809988, -0.75206993,  0.76978981, ..., -0.83268141,
        -0.30327554, -0.43319041]])
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 5)
print(x_train.shape)
print(x_test.shape)
print(y_train.shape)
print(y_test.shape)
(120348, 9)
(30087, 9)
(120348,)
(30087,)
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.linear_model import LogisticRegression
dtc = DecisionTreeClassifier(max_depth = 5, random_state = 1)
dtc.fit(x_train, y_train)
train_score = dtc.score(x_train, y_train)
test_score = dtc.score(x_test, y_test)
print(train_score)
print(test_score)
0.8141888523282481
0.8147704988865623
knn = KNeighborsClassifier(n_neighbors = 6)
knn.fit(x_train, y_train)
print(knn.score(x_train, y_train))
print(knn.score(x_test, y_test))
0.9251005417622229
0.8944062219563267
gbc = GradientBoostingClassifier(n_estimators = 30, learning_rate = 0.1,random_state = 28)
gbc.fit(x_train, y_train)
print(gbc.score(x_train, y_train))
print(gbc.score(x_test, y_test))
0.819540000664739
0.8204872536311364
rfc = RandomForestClassifier(n_estimators = 20, max_depth =6,random_state = 35)
rfc.fit(x_train, y_train)
print(rfc.score(x_train, y_train))
print(rfc.score(x_test, y_test))
0.8197809685246119
0.8201548841692425
LR = LogisticRegression()
LR.fit(x_train,y_train)
print(LR.score(x_train, y_train))
print(LR.score(x_test, y_test))
0.771612324259647
0.7691694087147273
pip install XGBoost 
Requirement already satisfied: XGBoost in c:\users\silam\anaconda3\lib\site-packages (1.7.6)
Requirement already satisfied: scipy in c:\users\silam\anaconda3\lib\site-packages (from XGBoost) (1.10.0)
Requirement already satisfied: numpy in c:\users\silam\anaconda3\lib\site-packages (from XGBoost) (1.23.5)
Note: you may need to restart the kernel to use updated packages.
​
from sklearn.metrics import auc, accuracy_score, confusion_matrix, mean_squared_error
import xgboost as xgb
xgb_model = xgb.XGBRegressor(objective="reg:linear", random_state=42)
xgb_model.fit(x_train, y_train)
xgb_model.score(x_train, y_train)
[22:57:50] WARNING: C:\buildkite-agent\builds\buildkite-windows-cpu-autoscaling-group-i-0fdc6d574b9c0d168-1\xgboost\xgboost-ci-windows\src\objective\regression_obj.cu:213: reg:linear is now deprecated in favor of reg:squarederror.
0.6061815652265559
y_predict=xgb_model.predict(x_test)
mean_squared_error(y_test,y_predict)
0.07638293888123737
xgb_model
XGBRegressor(base_score=None, booster=None, callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, feature_types=None,
             gamma=None, gpu_id=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_threshold=None, max_cat_to_onehot=None,
             max_delta_step=None, max_depth=None, max_leaves=None,
             min_child_weight=None, missing=nan, monotone_constraints=None,
             n_estimators=100, n_jobs=None, num_parallel_tree=None,
             objective='reg:linear', predictor=None, ...)
In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook.
On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.
from sklearn.ensemble import ExtraTreesClassifier
clf=ExtraTreesClassifier(n_estimators=20,random_state=0)
clf.fit(x_train,y_train)
print(clf.score(x_train,y_train))
print(clf.score(x_test,y_test))
1.0
0.933027553428391
knn.predict(x_test)
array([0., 1., 1., ..., 0., 1., 0.])
y_pred=knn.predict(x_test)
from sklearn.metrics import confusion_matrix
cm=confusion_matrix(y_test,y_pred)
cm
array([[ 5557,  1388],
       [ 1789, 21353]], dtype=int64)
plt.figure(figsize=(10,5))
sns.heatmap(cm,annot=True)
plt.xlabel('Predicted')
plt.ylabel('Actual')
Text(95.72222222222221, 0.5, 'Actual')

pip install --upgrade scikit-learn
Requirement already satisfied: scikit-learn in c:\users\silam\anaconda3\lib\site-packages (1.3.0)
Requirement already satisfied: numpy>=1.17.3 in c:\users\silam\anaconda3\lib\site-packages (from scikit-learn) (1.23.5)
Requirement already satisfied: threadpoolctl>=2.0.0 in c:\users\silam\anaconda3\lib\site-packages (from scikit-learn) (2.2.0)
Requirement already satisfied: scipy>=1.5.0 in c:\users\silam\anaconda3\lib\site-packages (from scikit-learn) (1.10.0)
Requirement already satisfied: joblib>=1.1.1 in c:\users\silam\anaconda3\lib\site-packages (from scikit-learn) (1.1.1)
Note: you may need to restart the kernel to use updated packages.
from sklearn.metrics import accuracy_score, f1_score,classification_report, roc_curve, auc,ConfusionMatrixDisplay
​
accuracy_score(y_test,y_pred)
0.8944062219563267
f1_score(y_test,y_pred,average='macro')
0.854225461327037
ConfusionMatrixDisplay.from_estimator(knn,x_test,y_test);

ConfusionMatrixDisplay.from_predictions(y_test, y_pred)
<sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x21eb9873100>

fpr,tpr,thresholds=roc_curve(y_test,y_pred)
roc_auc=auc(fpr,tpr)
plt.plot(fpr,tpr,label='ROC curve (area=%0.2f)'% roc_auc)
plt.plot([0,1],[0,1],'m-')
plt.xlim([0.0,1])
plt.ylim([0.0,1.2])
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('ROC Curve')
plt.legend()
plt.show()

print(classification_report(y_test,y_pred))
              precision    recall  f1-score   support

         0.0       0.76      0.80      0.78      6945
         1.0       0.94      0.92      0.93     23142

    accuracy                           0.89     30087
   macro avg       0.85      0.86      0.85     30087
weighted avg       0.90      0.89      0.90     30087

import pickle 
with open('cmodel.pkl','wb') as file:
    pickle.dump(dtc,file)
with open('cscaler.pkl','wb') as f:
    pickle.dump(ss,f)
with open ('ct.pkl','wb') as f:
    pickle.dump(OE,f)
import pickle 
with open('cmodel.pkl','wb') as file:
    pickle.dump(dtc,file)
with open('cscaler.pkl','wb') as f:
    pickle.dump(ss,f)
with open ('ct.pkl','wb') as f:
    pickle.dump(OE,f)
​
​
